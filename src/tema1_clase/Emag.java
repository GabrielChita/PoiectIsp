// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package tema1_clase;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Scanner;

/************************************************************/
/**
 * 
 */
public class Emag extends ECommerce {
	/**
	 * 
	 */
	public Cont cont;
	/**
	 * 
	 */
	public ItemCatalog[] itemCatalog;
	/**
	 * 
	 */
	public Client[] clienti;

	/**
	 * 
	 * @param produs 
	 */
	

	public void addItemCatalog(Produs produs,int cantitate)
	{
		boolean exista = false;
		int poz = -1;
		int cat_leng = (int)Arrays.stream(itemCatalog).filter(e -> e != null).count();
		for(int i = 0 ; i < cat_leng ; i++) {
			
			if(itemCatalog[i].getProdus().getNume_produs().compareTo(produs.getNume_produs()) == 0) {
				exista = true;
				poz = i;
				break;
			}
		}
		if (exista == true)
		{
			itemCatalog[poz].crestereStoc(cantitate);
		}
		else 
		{
			
			boolean furnizor = false;
			int pozcat = -1;
			int pozfurn = -1;
			for(int i = 0 ; i < cat_leng ; i++) {
				
				if(itemCatalog[i].getProdus().getFurnizor().getName() .compareTo(produs.getFurnizor().getName()) == 0) {
					furnizor = true;
					pozfurn = i;
					break;
				}
			}
			if(furnizor == false)
			{
				Scanner sc = new Scanner(System.in);
		        System.out.println("Furnizorul introdus nu exista!");
		        System.out.println("Doriti sa adugati furnizorul ? Y/N");
		        
		        char c = sc.next().charAt(0);
		        if(c == 'Y' || c == 'y')
		        {
		        	//Furnizor F = new Furnizor(produs.getFurnizor().getName());
		        }
		        else if(c == 'N' || c == 'n')
		        {
		        	System.out.println("Introduceti un furnzior deja existent!");
		        	return;
		        }
			}
			boolean category = false;
			for(int i = 0 ; i < cat_leng ; i++) {
				
				if(itemCatalog[i].getProdus().getCategorie().getName() .compareTo(produs.getCategorie().getName()) == 0) {
					category = true;
					pozcat = i;
					break;
				}
			}
			if(category == false)
			{
				Scanner sc = new Scanner(System.in);
		        System.out.println("Categoria introdusa nu exista!");
		        System.out.println("Doriti sa adugati categoria? Y/N");
		        
		        char c = sc.next().charAt(0);
		        if(c =='Y' || c == 'y')
		        {
		        	//Categorie C = new Categorie(produs.getCategorie().getName());
		        }
		        else
		        {
		        	System.out.println("Introduceti o categorie deja existenta!");
		        	return;
		        }
		    
			}
			
			ItemCatalog item = new ItemCatalog(cantitate,produs);
			
			System.out.println(cat_leng);
			this.itemCatalog[cat_leng] = item;
			
		}
			
	}
	
	public Emag(String nume, int numarAngajati, Cont cont, ItemCatalog[] itemCatalog, Client[] clienti) {
		super(nume, numarAngajati);
		this.cont = cont;
		this.itemCatalog = itemCatalog;
		this.clienti = clienti;
	}
	

	public Cont getCont() {
		return cont;
	}

	public void setCont(Cont cont) {
		this.cont = cont;
	}

	public ItemCatalog[] getItemCatalog() {
		return itemCatalog;
	}

	public void setItemCatalog(ItemCatalog[] itemCatalog) {
		this.itemCatalog = itemCatalog;
	}

	public Client[] getClienti() {
		return clienti;
	}

	public void setClienti(Client[] clienti) {
		this.clienti = clienti;
	}

	public int cantitateProdus(Produs produs) {

		int cat_leng = (int)Arrays.stream(itemCatalog).filter(e -> e != null).count();
		
		for(int i = 0 ; i < cat_leng ; i++) {
			
			if(itemCatalog[i].getProdus().getNume_produs().compareTo(produs.getNume_produs()) == 0) {
				return itemCatalog[i].getCantitate();
			}
		}
			
		return 0;
	}
	
	public void modifyCantitate(Produs produs ) {
		
		int cat_leng = (int)Arrays.stream(itemCatalog).filter(e -> e != null).count();

		for(int i = 0 ; i < cat_leng ; i++) {
					
			if(itemCatalog[i].getProdus().getNume_produs().compareTo(produs.getNume_produs()) == 0) {
				itemCatalog[i].ScadereStoc(1);
			}
		}
	}

	/**
	 * 
	 */
	public void afisareInventar() {
		System.out.println("Produsele din inventar:");
		int cat_leng = (int)Arrays.stream(itemCatalog).filter(e -> e != null).count();

		for(int i = 0 ; i < cat_leng; i++)
			itemCatalog[i].afisareItemCatalog();
	}

	/**
	 * 
	 */
	public void afisareVenit() {
		float total = 0;
		for(int i = 0 ; i < clienti.length; i++)
			if(clienti[i].isReadyCheckout() && clienti[i].isDoneCheckout()) {
				total += clienti[i].totalPlata();
			}
		System.out.println("Venitul Emag-ului: " + total);
	}

	/**
	 * 
	 * @param client 
	 */
	public void anulareComandaClient(Client client) {
		System.out.println("Comanda clientului " + client.getNume() + " " + client.getPrenume() + " a fost anulata");
		client.setReadyCheckout(false);
	}

	/**
	 * 
	 * @param client 
	 */
	public void restituieBani(Client client) {
		if(client.isDoneCheckout()) {
			this.cont.retragere(client.totalPlata());
			client.cont.adaugare(client.totalPlata());
		} else {
			System.out.println("Comanda clientului nu a fost inca procesata! Suma nu poate fi restituita");
		}
	}
	
	public void plataClient(Client client) {
		client.cont.retragere(client.totalPlata());
		this.cont.adaugare(client.totalPlata());
		generareFactura(client);
	}

	/**
	 * 
	 * @param client 
	 */
	
	public void generareFactura(Client client) {
		System.out.println();
		System.out.println("Factura Client: ");
		client.afisareClient();
		System.out.println("Total Plata: " + client.totalPlata());
		System.out.println();
	}
	
	public void updateInventar(Client client) {
		int prod_len = (int)Arrays.stream(client.getProdus()).filter(e -> e != null).count();
		for(int i = 0 ; i < prod_len ; i++) {
			modifyCantitate(client.getProdus()[i]);	
		}
	}
	
	public void procesareComenzi() {
		for(int i = 0 ; i < clienti.length; i++)
			if(clienti[i].isReadyCheckout() && !clienti[i].isDoneCheckout()) {
				int flagCantitate = 1;
				int prod_len = (int)Arrays.stream(clienti[i].getProdus()).filter(e -> e != null).count();
				
				for(int j = 0 ; j < prod_len ; j++) {
					if(clienti[i].getNrProduse(clienti[i].getProdus()[j]) > cantitateProdus(clienti[i].getProdus()[j])) {
						System.out.println(clienti[i].getNrProduse(clienti[i].getProdus()[j]) + "----" + cantitateProdus(clienti[i].getProdus()[j]));
						
						flagCantitate = 0;
						break;
					}
				}
				if(flagCantitate == 1) {
					clienti[i].setDoneCheckout(true);
					updateInventar(clienti[i]);
					plataClient(clienti[i]);
				}
				
				if(flagCantitate == 0)
					anulareComandaClient(clienti[i]);
				
					
			}
			
		
	}
}
